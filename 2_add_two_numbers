# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        curr1, curr2, num1, num2, count1, count2 = l1, l2, 0, 0, 0, 0
        
        while curr1:
            num1 += curr1.val * (10 ** count1)
            count1 += 1
            curr1 = curr1.next
            
        while curr2:
            num2 += curr2.val * (10 ** count2)
            count2 += 1
            curr2 = curr2.next
            
        summ = num1 + num2
        
        dummy = ListNode(0)
        head = dummy
        
        if summ == 0 : return ListNode(0)
        
        while summ != 0:
            head.next = ListNode(summ%10)
            summ = summ//10
            head = head.next
            
        return dummy.next


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        dummy = cur = ListNode(0)
        carry = 0
        while l1 or l2 or carry:
            if l1:
                carry += l1.val
                l1 = l1.next
            if l2:
                carry += l2.val
                l2 = l2.next
            cur.next = ListNode(carry%10)
            cur = cur.next
            carry //= 10
        return dummy.next
            