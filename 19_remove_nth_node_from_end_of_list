# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        curr = head
        lenA = 0
        
        while curr:
            lenA += 1
            curr = curr.next
            
        if lenA == 1: return []
        if lenA == n: 
            head = head.next
            return head
        
        curr = head
        for i in range(lenA - n - 1):
            curr = curr.next
        
        if n == 1:
            curr.next = None
        else:
            curr.next = curr.next.next
        return head

# 2 pointers
        
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        dummy = ListNode(0)
        dummy.next = head
        
        first = second = dummy
        
        for i in range(n):
            first = first.next

        while first.next != None:
            first = first.next
            second = second.next
            
        second.next = second.next.next
        
        return dummy.next