class Solution(object):

#BFS
    def canVisitAllRooms(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: bool
        """
        toCheck = set(rooms[0])
        visited = {0}
        
        while toCheck - visited:
            temp = set()
            for r in toCheck:
                if r not in visited:
                    temp = temp.union(set(rooms[r]))
                    visited.add(r)
            toCheck = temp
                    
        return len(visited) == len(rooms)

#DFS
    def canVisitAllRooms(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: bool
        """
        visited = {0}
        
        def dfs(r):
            for i in rooms[r]:
                if i not in visited:
                    visited.add(i)
                    dfs(i)
        
        dfs(0)
        
        return len(visited) == len(rooms)
                
            
            