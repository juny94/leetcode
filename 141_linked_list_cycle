# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# hash table
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        node_seen = []
        curr = head
        
        while curr != None:
            if curr in node_seen: 
                return True
            else:
                node_seen.append(curr)
                curr = curr.next
            
        return False

# two pointers
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
                
        if head == None or head.next == None:
            return False
        
        fast = head.next
        slow = head
        
        while fast != slow:
            if fast == None or fast.next == None:
                return False
            else:
                fast = fast.next.next
                slow = slow.next
        return True

# 2 pointers
def detectCycle(self, head):
    slow = fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            break
    else:
        return None
    while head != slow:
        slow = slow.next
        head = head.next
    return head