# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
# BFS
    def hasPathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: bool
        """
        if not root: return False
        
        toCheck = {root}
        
        while toCheck:
            temp = set()
            for x in toCheck:
                if x.val == sum and not x.left and not x.right: return True
                if x.left:
                    x.left.val = x.left.val + x.val
                    temp.add(x.left)
                if x.right:
                    x.right.val = x.right.val + x.val
                    temp.add(x.right)
            toCheck = temp
        return False
                
        
#DFS
    def hasPathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: bool
        """
        if not root: return False
        
        if not root.left and not root.right and root.val == sum:
            return True
        
        sum -= root.val
        
        return self.hasPathSum(root.left, sum) or self.hasPathSum(root.right, sum)
            
        