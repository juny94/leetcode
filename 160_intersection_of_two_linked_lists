# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# hash table
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        currA = headA
        currB = headB
        node_seen = set()
        
        while currA:
            node_seen.add(currA)
            currA = currA.next
        while currB:
            if currB in node_seen:
                return currB
            else:
                currB = currB.next
        return None

# 2 pointers
class Solution:
    # @param two ListNodes
    # @return the intersected ListNode
    def getIntersectionNode(self, headA, headB):
        curA, curB = headA, headB
        lenA, lenB = 0, 0
        
        while curA != None:
            lenA += 1
            curA = curA.next
            
        while curB != None:
            lenB += 1
            curB = curB.next
        
        curA, curB = headA, headB
        if lenA > lenB:
            for i in range(lenA-lenB):
                curA = curA.next
        elif lenA < lenB:
            for i in range(lenB-lenA):
                curB = curB.next
        while curA != curB:
            curA = curA.next
            curB = curB.next
        else:
            return curA
        return None